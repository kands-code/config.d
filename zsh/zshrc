# for zsh
fpath=(
  /opt/homebrew/share/zsh/site-functions
  ~/.config/zsh/zfunc
  "${fpath[@]}")
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
zstyle ':completion:*' use-cache on
zstyle ':completion:*' menu select
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*' cache-path "$HOME/.cache/zsh/.compcache"
autoload -Uz promptinit
promptinit
prompt walters

# for brew
export GPG_TTY=$(tty)
export GNUPGHOME="$HOME/.local/share/gnupg"
eval "$(/opt/homebrew/bin/brew shellenv)"

# daily update
dailyup() {
  # brew
  brew update
  brew upgrade
  brew autoremove
  brew cleanup --prune=all
  ## rust
  if command -v rustup >/dev/null 2>&1; then
    rustup update
    if [ "$?" = '0' ]; then
      cargo install --all-features \
        mdbook \
        mdbook-katex \
        mdbook-toc
    fi
  fi
  echo "should update ghcup by hand"
}

# pyenv init
if command -v pyenv >/dev/null 2>&1; then
  local pyenv_env_name="dev"
  local pyenv_env_base="3.12.2"
  eval "$(pyenv init -)"
  if command -v pyenv-virtualenv >/dev/null 2>&1; then
    eval "$(pyenv virtualenv-init -)"
    # init dev env
    if [ "$pyenv_env_name" != "$(cat $(pyenv root)/version)" ]; then
      if pyenv virtualenvs | grep "$pyenv_env_name" >/dev/null 2>&1; then
        pyenv global "$pyenv_env_name"
      else
        pyenv virtualenv $pyenv_env_base $pyenv_env_name
        pyenv global "$pyenv_env_name"
      fi
    fi
  fi
fi

# pandoc wrapper
if command -v pandoc >/dev/null 2>&1; then
  if command -v lualatex >/dev/null 2>&1; then
    cv2pdf() {
      local ftype="$1"
      shift
      local fname="$1"
      shift
      local oname="${fname%.*}.pdf"
      pandoc -f "$ftype" -t "pdf" "$fname" \
        -o "$oname" \
        --pdf-engine=lualatex \
        --metadata-file="$HOME/projects/config.d/others/pmeta.yaml"
    }
  fi
fi

# yt-dlp wrapper
if command -v "yt-dlp" >/dev/null 2>&1; then
  yd() {
    local url="$1"
    shift
    if [ -z "$url" ]; then
      echo "please give a url"
      return 1
    fi
    yt-dlp -o "%(uploader_id)s/%(playlist_title)s/p%(playlist_index)03d-%(title)s.%(ext)s" \
      -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' \
      "$url" \
      "$@"
    return 0
  }
fi
